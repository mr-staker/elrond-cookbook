#!/opt/chef/embedded/bin/ruby

require 'json'
require 'thor'
require 'yaml'

module Erctl
  class CLI < Thor
    def self.exit_on_failure?
      true
    end

    desc 'ui [--log-level LEVEL] ID', 'Spawn termui for specified node'
    option 'log-level', type: :string, aliases: %w[-l], default: '*:INFO',
                        desc: 'Elrond logger level(s)'
    def ui(id)
      cli 'termui', id
    end

    desc 'log [--log-level LEVEL] ID', 'Spawn logviewer for specified node'
    option 'log-level', type: :string, aliases: %w[-l], default: '*:INFO',
                        desc: 'Elrond logger level(s)'
    def log(id)
      cli 'logviewer', id
    end

    desc 'start ID', 'Invoke systemctl start elrond-node@ID; requires sudo'
    def start(id)
      svc __method__, id
    end

    desc 'stop ID', 'Invoke systemctl stop elrond-node@ID; requires sudo'
    def stop(id)
      svc __method__, id
    end

    desc 'restart ID', 'Invoke systemctl restart elrond-node@ID; requires sudo'
    def restart(id)
      svc __method__, id
    end

    desc 'status ID', 'Invoke systemctl status elrond-node@ID; may require sudo'
    def status(id)
      svc __method__, id
    end

    desc 'keybase [--format TYPE] [--write]', 'Export public BLS keys to be '\
      'used on Keybase; requires sudo'
    option :format, type: :string, aliases: %w[-f], default: 'txt',
                    enum: %w[txt json yml], desc: 'Export type'
    option :write, type: :boolean, aliases: %w[-w], default: false,
                   desc: 'Whether to write the export to disk as keybase.TYPE'
    def keybase
      keys = []

      Dir['/opt/etc/elrond/keyvault/*.pem'].each do |key|
        keys << File.read(key)[27, 192]
      end

      case options[:format]
      when 'txt'
        keys = "#{keys.join("\n")}\n"
      when 'json'
        keys = "#{keys.to_json}\n"
      when 'yml'
        keys = keys.to_yaml
      end

      if options[:write]
        return File.write "keybase.#{options[:format]}", keys
      end

      puts keys
    end

    desc 'list', 'List the node identifiers on this machine'
    def list
      Dir['/opt/var/elrond/node-*'].each do |node|
        puts File.basename(node)[5..-1]
      end
    end

    private

    def cli(cmd, id)
      addr = "--address 127.0.0.1:#{8080 + id.to_i}"
      logr = "--log-level #{options['log-level']}"

      Kernel.exec "/opt/elrond/bin/#{cmd} #{addr} #{logr}"
    end

    def svc(action, id)
      Kernel.exec "systemctl #{action} elrond-node@#{id.to_i}"
    end
  end
end

Erctl::CLI.start(ARGV)
